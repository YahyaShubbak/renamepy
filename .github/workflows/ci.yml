name: CI Tests

# Define when this workflow should run
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyQt6
        # Install optional dependencies for testing
        pip install Pillow
        # Note: ExifTool is not easily installable via pip in CI
        # We'll test the application without ExifTool for now

    - name: Install ExifTool (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool

    - name: Test basic imports
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Test if main modules can be imported
        try:
            from RenameFiles import is_media_file, is_image_file, is_video_file
            print('✅ Core functions imported successfully')
        except Exception as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        
        # Test media file detection
        assert is_media_file('test.jpg') == True
        assert is_media_file('test.mp4') == True
        assert is_media_file('test.txt') == False
        assert is_image_file('test.jpg') == True
        assert is_image_file('test.mp4') == False
        assert is_video_file('test.mp4') == True
        assert is_video_file('test.jpg') == False
        print('✅ Media file detection tests passed')
        "

    - name: Run unit tests
      run: |
        # Run any Python tests in the Tests directory
        if [ -d "Tests" ]; then
          echo "Running tests from Tests directory..."
          for test_file in Tests/test_*.py; do
            if [ -f "$test_file" ]; then
              echo "Running $test_file..."
              python "$test_file" || echo "Test $test_file failed but continuing..."
            fi
          done
        else
          echo "No Tests directory found, skipping unit tests"
        fi

    - name: Test application startup (headless)
      run: |
        # Test if the application can start without GUI (import test)
        python -c "
        import sys
        import os
        
        # Set headless mode for Qt
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        
        sys.path.append('.')
        
        try:
            # Test core functionality without GUI
            from RenameFiles import (
                get_filename_components_static,
                sanitize_filename,
                extract_exif_fields_with_retry,
                is_exiftool_installed
            )
            print('✅ Core functions imported successfully')
            
            # Test filename component generation
            components = get_filename_components_static(
                '20250725', 'A7R3', 'vacation', 'ILCE-7RM3', 'FE24-70',
                True, True, 1, ['Date', 'Prefix', 'Additional', 'Camera', 'Lens'],
                'YYYY-MM-DD', True
            )
            print(f'✅ Filename components generated: {components}')
            
            # Test filename sanitization
            clean_name = sanitize_filename('test/file:name<>')
            print(f'✅ Filename sanitization works: {clean_name}')
            
            # Test ExifTool detection
            exiftool_path = is_exiftool_installed()
            if exiftool_path:
                print(f'✅ ExifTool found at: {exiftool_path}')
            else:
                print('ℹ️ ExifTool not found (expected in CI environment)')
            
        except Exception as e:
            print(f'❌ Application test failed: {e}')
            sys.exit(1)
        "

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint

    - name: Run flake8 (basic syntax check)
      run: |
        # Run flake8 with relaxed settings for GUI application
        flake8 RenameFiles.py --max-line-length=120 --ignore=E501,W503,E203 || echo "Flake8 found style issues but continuing..."

    - name: Check for critical syntax errors
      run: |
        python -m py_compile RenameFiles.py
        echo "✅ Python syntax check passed"
